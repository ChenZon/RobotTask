import numpy as np
import cv2 as cv
import math
# import PWMServo

ori_width = int(4 * 160)  # 原始图像640x480
ori_height = int(3 * 160)
resize_width = int(80)  # 处理图像时缩小为80x60,加快处理速度，谨慎修改！
resize_height = int(60)
line_color = (255, 0, 0)  # 图像显示时，画出的线框颜色
line_thickness = 2  # 图像显示时，画出的线框的粗细
flag = 0
symbol = True           # 标志位
blackLine = None
circleMin = 100
circleMax = 1100
# stream = "http://127.0.0.1:8080/?action=stream?dummy=param.mjpg"




def getDisMax(contours, frame):                     # 获取
    global circleMax
    global circleMin
    disTemp = None
    disMax = 0
    for i in contours:
        (centerX, centerY), radius = cv.minEnclosingCircle(i)
        area = cv.contourArea(i)
        if area > circleMin and area <= circleMax:                                   # 限定圆的面积
            # print("area is: %s" % area)
            # cv.circle(frame, (int(centerX), int(centerY)), int(radius), (0, 0, 255), 2)
            # disArry.append(centerY)
            if centerY > disMax:                        # 遍历找距离最近的轮廓
                disMax = centerY
                disTemp = i
    return disTemp


def Task(frame):
    '''
    flag
    0: 表示没有黑线
    1: 表示左边有黑线
    2: 表示右边右黑线
    '''
    global flag
    global blackLine
    global symbol
    safeDis = 180
    src = cv.cvtColor(frame, cv.COLOR_BGR2HSV)     # hsv色彩空间
    h, s, v = cv.split(src)                        # 分离出各个HSV通道
    src = cv.merge((h, s, v))                      # 合并三个通道

    src21 = cv.inRange(src, (0, 0, 0), (180, 255, 102), ())                     # 对原图像和掩模进行位运算(陷阱)
    src31 = cv.morphologyEx(src21, cv.MORPH_CLOSE, np.ones((3, 3), np.uint8))   # 闭操作
    contours, hierarchy = cv.findContours(src31, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_NONE)      # 找出轮廓
    dis = getDisMax(contours, frame)                                            # 距离最短

    # ---------------------
    for i, contour in enumerate(contours):  # 检测黑线
        x, y, w, h = cv.boundingRect(contour)
        if h >= 40 and (x == 0 or x+w == 360):              # 区别黑线和陷阱的区别
            blackLine = contour
            cv.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
            if x > 180:
                print("黑线在右边")
                flag = 2
            else:
                print("黑线在左边")
                flag = 1
        else:
            flag = 0
    # ---------------------

    if blackLine is dis:                                # 当将黑线误以为是陷阱时，把陷阱置为空
        dis = None

    # ---------------------                             # 处理结果
    if dis is not None:
        (centerX, centerY), radius = cv.minEnclosingCircle(dis)
        print("center of circle: (%s,%s)" % (centerX, centerY))

        cv.circle(frame, (int(centerX), int(centerY)), int(radius), (0, 0, 255), 2)

    elif dis is None:
        print("Not Found the goal.")
    # if blackLine is None:
    #     print("Not Fouond the blackLine")
    # elif blackLine is not None:
    #     print("The blackLine appears")

    if dis is not None and blackLine is None:                               # 有陷阱没黑线    1
        if centerY < safeDis:
            print("centerY: %s" % centerY + "sateDis: %s" % safeDis)
            print("*Go")
        elif centerX > 180 and centerY >= safeDis:      # 陷阱在机器人右边
            print("*left shift")
        elif centerX <= 180 and centerY >= safeDis:     # 陷阱在机器人左边
            print("*right shift")

    elif dis is not None and blackLine is not None:                         # 有陷阱有黑线    2
        if centerY < safeDis:       # 在安全距离之外
            print("**Go  看到黑线，走进一点,左右平移一点")
        elif centerY >= safeDis:    # 在安全距离之内
            symbol = False
            if flag == 1:               # 陷阱在左边
                print("**right shift")
            elif flag == 2:
                print("**left shift")   # 陷阱在右边

        '''
        首先得判断陷阱是否在安全距离之内还是之外
        如果是在之外，再走近一点，以免左右平移会踩到其它的点
        如果是在之内，将要往相反的方向平移
        每次平移前，要调整与黑线平行
        '''

    elif dis is None and blackLine is not None:                             # 没陷阱有黑线    3
        if flag == 1:
            print("***right shift")
        elif flag == 2:
            print("***left shift")
    else:                                                                   # 没陷阱没黑线    4
        print("****Go")

    blackLine = None                                                        # 置为空

    # ---------------------

    cv.imshow("Frame", frame)
    cv.imshow("src31", src31)




def video_demo():
    # src = "C://Users//ASUS//Desktop//robot-running//Task//test1.avi"
    capture = cv.VideoCapture(1)
    while(True):
        ret, frame = capture.read()
        frame = cv.resize(frame, (360, 240), interpolation=cv.INTER_CUBIC)    # 将图片缩放
        Task(frame)
        c = cv.waitKey(40)
        if c == 27:
            capture.release()
            break


video_demo()
cv.waitKey(0)

